; Hisp List Functions

(define length (l) (foldl (Î» (acc a) (+ 1 (acc))) 0 (l)))

(define reverse (l) (foldl (Î» (acc a) (: (a) (acc))) () (l)))

; `rangeH` is must faster.
(define range (a b) (if (= (a) (b))
                        ((a))
                        (: (a) (range (+ 1 (a)) (b)))))

(define range-step (a b c) (range-step' (a) (- (b) (a)) (c)))

; Need closures...
(define range-step' (a s c) (if (> (a) (c))
                                ()
                                (: (a) (range-step' (+ (s) (a)) (s) (c)))))

(define null? (l) (= 0 (len (l))))

(define single? (l) (= 1 (len (l))))

(define map (f l) (if (null? (l))
                      ()
                      (: ((f) (head (l)))
                         (map (f) (tail (l))))))

(define filter (p l)
   (if (null? (l))
       ()
       (if ((p) (head (l)))
           (: (head (l)) (filter (p) (tail (l))))
           (filter (p) (tail (l))))))

; Iterative, so better? Tail-recursable?
(define foldl (f z l)
        (if (null? (l))
            (z)
            (foldl (f)
                   ((f) (z) (head (l)))
                   (tail (l)))))

(define foldr (f z l)
        (if (null? (l))
            (z)
            ((f) (head (l))
                 (foldr (f)
                        (z)
                        (tail (l))))))
