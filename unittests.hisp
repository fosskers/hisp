(require "fib.hisp")
(require "prelude.hisp")
(require "./Euler/euler1.hisp")

; Unit tests for Hisp.

(define assert (prep) (if (prep)
	       	      	  "Okay!"
			  "Failed."))

(define assertEq (a b s) (concat "Testing "
                                 (s)
                                 (if (= (a) (b))
                                     " ... Okay!"
                                     (concat " ... Failed, giving: --> "
                                             (apply show (b))))))

;; TESTS
(assertEq 1 1 "1")

(assertEq 55 (fib 10) "(fib 10)")

(assertEq 2 ((lambda (z) (+ 1 (z))) 1) "((lambda (z) (+ 1 (z))) 1)")

(assertEq (2 3 4)
          (map (lambda (z) (+ 1 (z))) (1 2 3))
          "(map (lambda (z) (+ 1 (z))) (1 2 3))")

(assertEq (2 3 4)
          (mapH (lambda (z) (+ 1 (z))) (1 2 3))
          "(mapH (lambda (z) (+ 1 (z))) (1 2 3))")

(assertEq (6 7 8)
          (filter (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8))
          "(filter (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8))")

(assertEq (6 7 8)
          (filterH (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8))
          "(filterH (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8))")

"***Testing List Functions***"
(assertEq () () "()")

(assertEq () (tail (1)) "(tail (1))")

(assertEq (1 2 3) (: 1 (tail (1 2 3))) "(: 1 (tail (1 2 3)))")

(assertEq (1 2 3) (: 1 (: 2 (: 3 ()))) "(: 1 (: 2 (: 3 ())))")

(assertEq (0) (range 0 0) "(range 0 0)")

(assertEq (1 2 3 4 5) (range 1 5) "(range 1 5)")

(assertEq 0 (sum ()) "(sum ())")

(assertEq 15 (sum (1 2 3 4 5)) "(sum (1 2 3 4 5))")

(define foo 1)
(assertEq 1 (foo) "(foo)")

(define bar () (+ 1 1))
(assertEq 2 (bar) "(bar)")

"***Testing Project Euler Solutions***"
(assertEq 233168 (solve2 1000) "Problem #1")
