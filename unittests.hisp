(require "fib.hisp")
(require "prelude.hisp")

(define assert (prep) (if (prep)
	       	      	  "Okay!"
			  "Failed."))

(define assertEq (a b) (if (= (a) (b))
                           "Okay!"
                           (concat "Failed, giving: --> " (apply show (b)))))

"Testing (= 1 1)..."
(assert (= 1 1))

"Testing (= 55 (fib 10))..."
(assertEq 55 (fib 10))

"Testing (= 2 ((lambda (z) (+ 1 (z))) 1))..."
(assertEq 2 ((lambda (z) (+ 1 (z))) 1))

"Testing (= (2 3 4) (map (lambda (z) (+ 1 (z))) (1 2 3)))..."
(assertEq (2 3 4) (map (lambda (z) (+ 1 (z))) (1 2 3)))

"Testing (= (6 7 8)) (filter (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8))..."
(assertEq (6 7 8) (filter (lambda (z) (> (z) 5)) (1 2 3 4 5 6 7 8)))

"***Testing List Functions***"
"Testing (= () ())..."
(assert (= () ()))

"Testing (= () (tail (1)))..."
(assertEq () (tail (1)))

"Testing (= (1 2 3) (: 1 (tail (1 2 3))))..."
(assertEq (1 2 3) (: 1 (tail (1 2 3))))

"Testing (= (1 2 3) (: 1 (: 2 (: 3 ()))))..."
(assertEq (1 2 3) (: 1 (: 2 (: 3 ()))))

"Testing (= () (range 0 0))..."
(assertEq (0) (range 0 0))

"Testing (= (1 2 3 4 5) (range 1 5))..."
(assertEq (1 2 3 4 5) (range 1 5))
