(require "fib.hisp")
(require "prelude.hisp")
(require "./Euler/euler1.hisp")
(require "./Euler/euler2.hisp")
(require "./Euler/euler5.hisp")
(require "./Euler/euler6.hisp")

; Unit tests for Hisp.

(define assert (prep) (if (prep)
	       	      	  "Okay!"
			  "Failed."))

(define assertEq (a b s) (let ((status (= (a) (b))))
			   (concat "[ "
				   (if (status) "PASS" "FAIL")
				   " ] Testing "
				   (s)
				   (if (status)
				       ""
				       (concat " ... Failed with: --> "
					       (apply show (b)))))))


;; TESTS
(assertEq 1 1 "1")

(assertEq 55 (fib 10) "(fib 10)")

"**********************************"
"*** Testing Control Structures ***"
"**********************************"
(define let-test1 () (let ((a 1)
                           (b 2))
		       (+ (a) (b))))
(assertEq 3 (let-test1) "let block")

(define let-test2 () (let ()
		       5))
(assertEq 5 (let-test2) "empty let block")

; Aliasing a natively-defined function.
(define let-test3 () (let ((p prime?))
		       ((p) 3)))
(assertEq True (let-test3) "function aliasing in let block")

; Aliasing a built-in with set arg number.
(define let-test3b () (let ((m mapH))
			((m) (λ (z) (+ 1 (z))) (1 2 3))))
(assertEq (2 3 4) (let-test3b) "more function aliasing in let block")

; Aliasing a built-in with infinite arg number.
(define let-test3c () (let ((f +))
			((f) 1 1)))
(assertEq 2 (let-test3c) "even more function aliasing")

(define let-test4 () (let ((f (λ (z) (+ 1 (z)))))
		       ((f) 1)))
(assertEq 2 (let-test4) "lambda definitions in let block")

(define let-test5 () (let ((a 5)
			   (b (+ 1 (a))))
		       (b)))
(assertEq 6 (let-test5) "symbols in let blocks referring to each other")

"**************************************"
"*** Testing Higher-Order Functions ***"
"**************************************"
(assertEq 2 ((λ (z) (+ 1 (z))) 1) "((λ (z) (+ 1 (z))) 1)")

(assertEq 2 (((λ () (λ (z) (+ 1 (z))))) 1)
            "(((λ () (λ (z) (+ 1 (z))))) 1)")

(assertEq 6 (((λ () !)) 3) "(((λ () !)) 3)")

(assertEq (2 3 4)
          (map (λ (z) (+ 1 (z))) (1 2 3))
          "(map (λ (z) (+ 1 (z))) (1 2 3))")

(assertEq (2 3 4)
          (mapH (λ (z) (+ 1 (z))) (1 2 3))
          "(mapH (λ (z) (+ 1 (z))) (1 2 3))")

(assertEq (1 2 6)
          (map ! (1 2 3))
          "(map ! (1 2 3))")

(assertEq (1 2 6)
          (mapH ! (1 2 3))
          "(mapH ! (1 2 3))")

(assertEq (6 7 8)
          (filter (λ (z) (> (z) 5)) (1 2 3 4 5 6 7 8))
          "(filter (λ (z) (> (z) 5)) (1 2 3 4 5 6 7 8))")

(assertEq (6 7 8)
          (filterH (λ (z) (> (z) 5)) (1 2 3 4 5 6 7 8))
          "(filterH (λ (z) (> (z) 5)) (1 2 3 4 5 6 7 8))")

(assertEq 15
         (foldl (λ (acc z) (+ (acc) (z))) 0 (1 2 3 4 5))
         "(foldl (λ (acc z) (+ (acc) (z))) 0 (1 2 3 4 5))")

(assertEq 15 (foldl + 0 (1 2 3 4 5)) "(foldl + 0 (1 2 3 4 5))")

(assertEq 15 (foldlH + 0 (1 2 3 4 5)) "(foldlH + 0 (1 2 3 4 5))")

(assertEq 15
          (foldr (λ (z acc) (+ (acc) (z))) 0 (1 2 3 4 5))
          "(foldr (λ (z acc) (+ (acc) (z))) 0 (1 2 3 4 5))")

(assertEq (1 2 3 4 5)
          (foldr : () (1 2 3 4 5))
          "(foldr : () (1 2 3 4 5))")

(define compose-test () (let ((f (. prime? ! inc dec inc)))
			  ((f) 2)))

(assertEq False (compose-test) "function composition")

"******************************"
"*** Testing List Functions ***"
"******************************"
(assertEq () () "()")

(assertEq () (tail (1)) "(tail (1))")

(assertEq (1 2 3) (: 1 (tail (1 2 3))) "(: 1 (tail (1 2 3)))")

(assertEq (1 2 3) (: 1 (: 2 (: 3 ()))) "(: 1 (: 2 (: 3 ())))")

(assertEq (0) (range 0 0) "(range 0 0)")

(assertEq (1 2 3 4 5) (range 1 5) "(range 1 5)")

(assertEq 0 (sum ()) "(sum ())")

(assertEq 15 (sum (1 2 3 4 5)) "(sum (1 2 3 4 5))")

(assertEq 120 (product (1 2 3 4 5)) "(product (1 2 3 4 5))")

(assertEq (5 4 3 2 1) (reverse (1 2 3 4 5)) "(reverse (1 2 3 4 5))")

(define foo 1)
(assertEq 1 (foo) "(foo)")

(define bar () (+ 1 1))
(assertEq 2 (bar) "(bar)")

"***********************"
"*** Testing Primes *** "
"***********************"
(assertEq 13 (next-prime 11) "(next-prime 11)")

(assertEq () (prime-factors 1) "(prime-factors 1)")

(assertEq (2 5) (prime-factors 10) "(prime-factors 10)")

"***************************************"
"*** Testing Project Euler Solutions ***"
"***************************************"
(assertEq 233168    (euler1 1000) "Problem #1")
(assertEq 4613732   (euler2) "Problem #2")
(assertEq 232792560 (euler5) "Problem #5")
(assertEq 25164150  (euler6) "Problem #6")
