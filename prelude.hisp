; Hisp Prelude

;; MATH
(define sum (ns) (if (null? (ns))
                     0
                     (+ (head (ns)) (sum (tail (ns))))))

(define square (n) (^ (n) 2))

(define cube (n) (^ (n) 3))

; What about `0`?
(define even? (n) (zero? (mod (n) 2)))

(define odd? (n) (not (even? (n))))

(define pos? (n) (> (n) 0))

(define neg? (n) (< (n) 0))

(define zero? (n) (= 0 (n)))

;; LISTS
; `rangeH` is must faster.
(define range (a b) (if (= (a) (b))
                        ((a))
                        (: (a) (range (+ 1 (a)) (b)))))

(define null? (l) (= 0 (len (l))))

(define single? (l) (= 1 (len (l))))

(define map (f l) (if (null? (l))
                      ()
                      (: ((f) (head (l)))
                         (map (f) (tail (l))))))

(define filter (p l)
   (if (null? (l))
       ()
       (if ((p) (head (l)))
           (: (head (l)) (filter (p) (tail (l))))
           (filter (p) (tail (l))))))

(define foldl (f z l)
        (if (null? (l))
            (z)
            (foldl (f)
                   ((f) (z) (head (l)))
                   (tail (l)))))

;; OTHER
(define not (p) (if (p) False True))

(define id (n) (n))

(define $ (f a) ((f) (a)))
