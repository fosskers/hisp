; Hisp Prelude

;; MATH
(define inc (n) (+ 1 (n)))

(define dec (n) (- (n) 1))

(define sum (ns) (foldlH + 0 (ns)))

(define product (ns) (foldlH * 1 (ns)))

(define square (n) (^ (n) 2))

(define cube (n) (^ (n) 3))

(define max (ns) (foldl (λ (acc n) (if (> (acc) (n)) (acc) (n)))
			(head (ns))
			(tail (ns))))

(define min (ns) (foldl (λ (acc n) (if (< (acc) (n)) (acc) (n)))
			(head (ns))
			(tail (ns))))

; What about `0`?
(define even? (n) (zero? (mod (n) 2)))

(define odd? (n) (not (even? (n))))

(define pos? (n) (> (n) 0))

(define neg? (n) (< (n) 0))

(define one? (n) (= 1 (n)))

(define zero? (n) (= 0 (n)))

(define divides? (a b) (= 0 (mod (a) (b))))

(define prime? (n)
        (cond (< (n) 2) False
              (= (n) 2) True
              (else)    (prime-work (n) (: 2 (range-step 3 5 (+ 1 (sqrt (n))))))))

(define prime-work (n divs)
        (cond (null? (divs)) True
              (divides? (n) (head (divs))) False
              (else) (prime-work (n) (tail (divs)))))

(define prime-factors (n) (if (prime? (n))
			      ((n))
			      (prime-factors-work (n) 2)))

; Doesn't work?
(define prime-factors-work (n divisor)
        (cond (one? (n)) ()
	      (divides? (n) (divisor)) (: (divisor)
					  (let ((next (div (n) (divisor))))
					    (if (prime? (next))
						((next))
						(prime-factors-work (div (n) (divisor))
								    (divisor)))))
	      (else) (prime-factors-work (n)
					 (next-prime (divisor)))))

(define next-prime (p) (if (even? (p))
			   (next-prime (- (p) 1))
			   (let ((next (+ 2 (p))))
			     (if (prime? (next))
				 (next)
				 (next-prime (next))))))

;; LISTS
; `rangeH` is must faster.
(define range (a b) (if (= (a) (b))
                        ((a))
                        (: (a) (range (+ 1 (a)) (b)))))

(define range-step (a b c) (range-step' (a) (- (b) (a)) (c)))

; Need closures...
(define range-step' (a s c) (if (> (a) (c))
                                ()
                                (: (a) (range-step' (+ (s) (a)) (s) (c)))))

(define null? (l) (= 0 (len (l))))

(define single? (l) (= 1 (len (l))))

(define map (f l) (if (null? (l))
                      ()
                      (: ((f) (head (l)))
                         (map (f) (tail (l))))))

(define filter (p l)
   (if (null? (l))
       ()
       (if ((p) (head (l)))
           (: (head (l)) (filter (p) (tail (l))))
           (filter (p) (tail (l))))))

; Iterative, so better? Tail-recursable?
(define foldl (f z l)
        (if (null? (l))
            (z)
            (foldl (f)
                   ((f) (z) (head (l)))
                   (tail (l)))))

(define foldr (f z l)
        (if (null? (l))
            (z)
            ((f) (head (l))
                 (foldr (f)
                        (z)
                        (tail (l))))))

;; OTHER
(define not (p) (if (p) False True))

(define id (n) (n))

(define $ (f a) ((f) (a)))

(define and? (l) (cond (null? (l)) True
                       (not (head (l))) False
                       (else) (and? (tail (l)))))

(define or? (l) (cond (null? (l)) False
                      (head (l)) True
                      (else) (or? (tail (l)))))
